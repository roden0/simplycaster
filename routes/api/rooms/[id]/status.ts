/**\n * Room Status API\n * \n * GET /api/rooms/[id]/status - Get room status including WebRTC state\n */\n\nimport { Handlers } from \"$fresh/server.ts\";\nimport { getService } from \"../../../../lib/container/global.ts\";\nimport { ServiceKeys } from \"../../../../lib/container/registry.ts\";\nimport { CachedRoomService } from \"../../../../lib/infrastructure/services/cached-room-service.ts\";\nimport { authenticateRequest } from \"../../../../lib/middleware/auth.ts\";\n\nexport const handler: Handlers = {\n  async GET(req, ctx) {\n    try {\n      // Authenticate request\n      const authResult = await authenticateRequest(req);\n      if (!authResult.success) {\n        return new Response(\n          JSON.stringify({ error: \"Authentication required\" }),\n          { \n            status: 401,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      const roomId = ctx.params.id;\n      if (!roomId) {\n        return new Response(\n          JSON.stringify({ error: \"Room ID is required\" }),\n          { \n            status: 400,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      // Get room from database\n      const cachedRoomService = await getService<CachedRoomService>(ServiceKeys.CACHED_ROOM_SERVICE);\n      const room = await cachedRoomService.getRoomById(roomId);\n      \n      if (!room) {\n        return new Response(\n          JSON.stringify({ \n            error: \"Room not found\",\n            roomId\n          }),\n          { \n            status: 404,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      // Check if user has access to this room\n      const isHost = room.hostId === authResult.user.id;\n      const isAdmin = authResult.user.role === 'admin';\n      \n      if (!isHost && !isAdmin) {\n        return new Response(\n          JSON.stringify({ error: \"Access denied\" }),\n          { \n            status: 403,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      // Get WebRTC session information\n      let webrtcSession = null;\n      try {\n        const { getWebRTCServiceManager } = await import(\"../../../../lib/webrtc/index.ts\");\n        const serviceManager = getWebRTCServiceManager();\n        const roomCoordinator = serviceManager.getRoomCoordinator();\n        \n        const session = await roomCoordinator.getRoomSession(roomId);\n        if (session) {\n          webrtcSession = {\n            sessionId: session.id,\n            isActive: true,\n            participantCount: session.participants.length,\n            connectedParticipants: session.participants.filter(p => p.isConnected).length,\n            isRecording: session.isRecording,\n            recordingStartedAt: session.recordingStartedAt,\n            recordingDuration: session.isRecording && session.recordingStartedAt \n              ? Date.now() - session.recordingStartedAt.getTime()\n              : null,\n            createdAt: session.createdAt,\n            lastActivity: session.lastActivity,\n            participants: session.participants.map(p => ({\n              id: p.id,\n              name: p.name,\n              type: p.type,\n              isConnected: p.isConnected,\n              connectionState: p.connectionState,\n              hasAudio: p.hasAudio,\n              hasVideo: p.hasVideo,\n              joinedAt: p.joinedAt,\n              connectionQuality: p.connectionQuality || 'unknown'\n            }))\n          };\n        }\n      } catch (webrtcError) {\n        console.error(\"Error getting WebRTC session:\", webrtcError);\n        // Continue without WebRTC data\n      }\n\n      // Prepare room status response\n      const response = {\n        room: {\n          id: room.id,\n          name: room.name,\n          slug: room.slug,\n          status: room.status,\n          hostId: room.hostId,\n          maxParticipants: room.maxParticipants,\n          allowVideo: room.allowVideo,\n          createdAt: room.createdAt,\n          updatedAt: room.updatedAt,\n          closedAt: room.closedAt\n        },\n        webrtc: webrtcSession || {\n          isActive: false,\n          participantCount: 0,\n          connectedParticipants: 0,\n          isRecording: false,\n          participants: []\n        },\n        capabilities: {\n          canStartRecording: isHost || isAdmin,\n          canInviteParticipants: isHost || isAdmin,\n          canKickParticipants: isHost || isAdmin,\n          canCloseRoom: isHost || isAdmin\n        },\n        timestamp: new Date().toISOString()\n      };\n\n      return new Response(\n        JSON.stringify(response),\n        { \n          status: 200,\n          headers: { \n            \"Content-Type\": \"application/json\",\n            \"Cache-Control\": \"no-cache, no-store, must-revalidate\"\n          }\n        }\n      );\n\n    } catch (error) {\n      console.error(\"Error getting room status:\", error);\n      return new Response(\n        JSON.stringify({ \n          error: \"Internal server error\",\n          message: error instanceof Error ? error.message : \"Unknown error\"\n        }),\n        { \n          status: 500,\n          headers: { \"Content-Type\": \"application/json\" }\n        }\n      );\n    }\n  }\n};"