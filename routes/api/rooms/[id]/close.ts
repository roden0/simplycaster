/**\n * Room Close API\n * \n * POST /api/rooms/[id]/close - Close a room and cleanup WebRTC session\n */\n\nimport { Handlers } from \"$fresh/server.ts\";\nimport { getService } from \"../../../../lib/container/global.ts\";\nimport { ServiceKeys } from \"../../../../lib/container/registry.ts\";\nimport { CloseRoomUseCase } from \"../../../../lib/application/use-cases/room/close-room-use-case.ts\";\nimport { CachedRoomService } from \"../../../../lib/infrastructure/services/cached-room-service.ts\";\nimport { authenticateRequest } from \"../../../../lib/middleware/auth.ts\";\nimport { ValidationError, EntityNotFoundError, BusinessRuleError } from \"../../../../lib/domain/errors/index.ts\";\n\nexport const handler: Handlers = {\n  async POST(req, ctx) {\n    try {\n      // Authenticate request\n      const authResult = await authenticateRequest(req);\n      if (!authResult.success) {\n        return new Response(\n          JSON.stringify({ error: \"Authentication required\" }),\n          { \n            status: 401,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      const roomId = ctx.params.id;\n      if (!roomId) {\n        return new Response(\n          JSON.stringify({ error: \"Room ID is required\" }),\n          { \n            status: 400,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      // Check if user has permission to close the room\n      const cachedRoomService = await getService<CachedRoomService>(ServiceKeys.CACHED_ROOM_SERVICE);\n      const room = await cachedRoomService.getRoomById(roomId);\n      \n      if (!room) {\n        return new Response(\n          JSON.stringify({ \n            error: \"Room not found\",\n            roomId\n          }),\n          { \n            status: 404,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      const isHost = room.hostId === authResult.user.id;\n      const isAdmin = authResult.user.role === 'admin';\n      \n      if (!isHost && !isAdmin) {\n        return new Response(\n          JSON.stringify({ error: \"Only the host or admin can close the room\" }),\n          { \n            status: 403,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      // Parse request body for close reason\n      const body = await req.json().catch(() => ({}));\n      const reason = body.reason || 'Room closed by host';\n\n      // Cleanup WebRTC session first\n      try {\n        const { getWebRTCServiceManager } = await import(\"../../../../lib/webrtc/index.ts\");\n        const serviceManager = getWebRTCServiceManager();\n        const roomCoordinator = serviceManager.getRoomCoordinator();\n        \n        // Get session info before cleanup\n        const session = await roomCoordinator.getRoomSession(roomId);\n        if (session) {\n          console.log(`Cleaning up WebRTC session for room ${roomId} with ${session.participants.length} participants`);\n          \n          // Stop any active recording\n          if (session.isRecording) {\n            await roomCoordinator.stopRecording(roomId, authResult.user.id);\n          }\n          \n          // Notify all participants that room is closing\n          await roomCoordinator.notifyRoomClosing(roomId, reason);\n          \n          // Cleanup the session\n          await roomCoordinator.cleanupRoom(roomId);\n          \n          console.log(`WebRTC session cleaned up for room ${roomId}`);\n        }\n      } catch (webrtcError) {\n        console.error(\"Error cleaning up WebRTC session:\", webrtcError);\n        // Continue with room closure even if WebRTC cleanup fails\n      }\n\n      // Close the room using the use case\n      const closeRoomUseCase = await getService<CloseRoomUseCase>(ServiceKeys.CLOSE_ROOM_USE_CASE);\n      const result = await closeRoomUseCase.execute({\n        roomId,\n        closedBy: authResult.user.id,\n        reason\n      });\n\n      if (!result.success) {\n        const error = result.error;\n        \n        if (error instanceof ValidationError) {\n          return new Response(\n            JSON.stringify({\n              success: false,\n              error: error.message,\n              code: error.code,\n              field: error.field\n            }),\n            {\n              status: 400,\n              headers: { \"Content-Type\": \"application/json\" }\n            }\n          );\n        }\n\n        if (error instanceof EntityNotFoundError) {\n          return new Response(\n            JSON.stringify({\n              success: false,\n              error: error.message,\n              code: error.code\n            }),\n            {\n              status: 404,\n              headers: { \"Content-Type\": \"application/json\" }\n            }\n          );\n        }\n\n        if (error instanceof BusinessRuleError) {\n          return new Response(\n            JSON.stringify({\n              success: false,\n              error: error.message,\n              code: error.code,\n              rule: error.rule\n            }),\n            {\n              status: 422,\n              headers: { \"Content-Type\": \"application/json\" }\n            }\n          );\n        }\n\n        return new Response(\n          JSON.stringify({\n            success: false,\n            error: \"Room closure failed\",\n            code: \"INTERNAL_ERROR\"\n          }),\n          {\n            status: 500,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      // Success response\n      const { room: closedRoom, message } = result.data;\n      \n      return new Response(\n        JSON.stringify({\n          success: true,\n          data: {\n            room: {\n              id: closedRoom.id,\n              name: closedRoom.name,\n              slug: closedRoom.slug,\n              status: closedRoom.status,\n              hostId: closedRoom.hostId,\n              closedAt: closedRoom.closedAt\n            },\n            message,\n            webrtcCleanup: true\n          }\n        }),\n        {\n          status: 200,\n          headers: { \"Content-Type\": \"application/json\" }\n        }\n      );\n\n    } catch (error) {\n      console.error(\"Room close route error:\", error);\n      \n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: \"Internal server error\",\n          code: \"INTERNAL_ERROR\"\n        }),\n        {\n          status: 500,\n          headers: { \"Content-Type\": \"application/json\" }\n        }\n      );\n    }\n  }\n};"