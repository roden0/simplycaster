/**\n * WebRTC Session Status API\n * \n * GET /api/webrtc/sessions/[roomId] - Get active WebRTC sessions for a room\n */\n\nimport { Handlers } from \"$fresh/server.ts\";\nimport { getWebRTCServiceManager } from \"../../../../lib/webrtc/index.ts\";\nimport { authenticateRequest } from \"../../../../lib/middleware/auth.ts\";\n\nexport const handler: Handlers = {\n  async GET(req, ctx) {\n    try {\n      // Authenticate request\n      const authResult = await authenticateRequest(req);\n      if (!authResult.success) {\n        return new Response(\n          JSON.stringify({ error: \"Authentication required\" }),\n          { \n            status: 401,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      const roomId = ctx.params.roomId;\n      if (!roomId) {\n        return new Response(\n          JSON.stringify({ error: \"Room ID is required\" }),\n          { \n            status: 400,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      // Get WebRTC service manager\n      const serviceManager = getWebRTCServiceManager();\n      const roomCoordinator = serviceManager.getRoomCoordinator();\n\n      // Get room session information\n      const roomSession = await roomCoordinator.getRoomSession(roomId);\n      if (!roomSession) {\n        return new Response(\n          JSON.stringify({ \n            error: \"Room not found or no active WebRTC session\",\n            roomId,\n            hasActiveSession: false\n          }),\n          { \n            status: 404,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      // Get participant connection status\n      const participants = roomSession.participants;\n      const participantStatus = participants.map(participant => ({\n        id: participant.id,\n        name: participant.name,\n        type: participant.type,\n        isConnected: participant.isConnected,\n        connectionState: participant.connectionState,\n        iceConnectionState: participant.iceConnectionState,\n        joinedAt: participant.joinedAt,\n        lastActivity: participant.lastActivity,\n        hasAudio: participant.hasAudio,\n        hasVideo: participant.hasVideo,\n        connectionQuality: participant.connectionQuality || 'unknown'\n      }));\n\n      // Get recording status\n      const recordingStatus = {\n        isRecording: roomSession.isRecording,\n        recordingStartedAt: roomSession.recordingStartedAt,\n        recordingDuration: roomSession.isRecording && roomSession.recordingStartedAt \n          ? Date.now() - roomSession.recordingStartedAt.getTime()\n          : null,\n        recordingParticipants: roomSession.recordingParticipants || []\n      };\n\n      // Get session statistics\n      const sessionStats = {\n        totalParticipants: participants.length,\n        connectedParticipants: participants.filter(p => p.isConnected).length,\n        sessionDuration: Date.now() - roomSession.createdAt.getTime(),\n        totalMessages: roomSession.messageCount || 0,\n        lastActivity: roomSession.lastActivity\n      };\n\n      const response = {\n        roomId,\n        hasActiveSession: true,\n        sessionId: roomSession.id,\n        hostId: roomSession.hostId,\n        createdAt: roomSession.createdAt,\n        participants: participantStatus,\n        recording: recordingStatus,\n        statistics: sessionStats,\n        timestamp: new Date().toISOString()\n      };\n\n      return new Response(\n        JSON.stringify(response),\n        { \n          status: 200,\n          headers: { \n            \"Content-Type\": \"application/json\",\n            \"Cache-Control\": \"no-cache, no-store, must-revalidate\"\n          }\n        }\n      );\n\n    } catch (error) {\n      console.error(\"Error getting WebRTC session status:\", error);\n      return new Response(\n        JSON.stringify({ \n          error: \"Internal server error\",\n          message: error instanceof Error ? error.message : \"Unknown error\"\n        }),\n        { \n          status: 500,\n          headers: { \"Content-Type\": \"application/json\" }\n        }\n      );\n    }\n  }\n};"