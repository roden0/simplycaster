/**\n * WebRTC Participant Status API\n * \n * GET /api/webrtc/participants/[roomId]/[participantId] - Get participant connection status\n * PUT /api/webrtc/participants/[roomId]/[participantId] - Update participant status\n */\n\nimport { Handlers } from \"$fresh/server.ts\";\nimport { getWebRTCServiceManager } from \"../../../../../lib/webrtc/index.ts\";\nimport { authenticateRequest } from \"../../../../../lib/middleware/auth.ts\";\n\nexport const handler: Handlers = {\n  async GET(req, ctx) {\n    try {\n      // Authenticate request\n      const authResult = await authenticateRequest(req);\n      if (!authResult.success) {\n        return new Response(\n          JSON.stringify({ error: \"Authentication required\" }),\n          { \n            status: 401,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      const roomId = ctx.params.roomId;\n      const participantId = ctx.params.participantId;\n      \n      if (!roomId || !participantId) {\n        return new Response(\n          JSON.stringify({ error: \"Room ID and Participant ID are required\" }),\n          { \n            status: 400,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      // Get WebRTC service manager\n      const serviceManager = getWebRTCServiceManager();\n      const roomCoordinator = serviceManager.getRoomCoordinator();\n\n      // Get participant status\n      const participant = await roomCoordinator.getParticipant(roomId, participantId);\n      if (!participant) {\n        return new Response(\n          JSON.stringify({ \n            error: \"Participant not found\",\n            roomId,\n            participantId\n          }),\n          { \n            status: 404,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      // Get detailed connection information\n      const connectionInfo = await roomCoordinator.getParticipantConnectionInfo(roomId, participantId);\n      \n      const response = {\n        roomId,\n        participant: {\n          id: participant.id,\n          name: participant.name,\n          type: participant.type,\n          isConnected: participant.isConnected,\n          connectionState: participant.connectionState,\n          iceConnectionState: participant.iceConnectionState,\n          joinedAt: participant.joinedAt,\n          lastActivity: participant.lastActivity,\n          hasAudio: participant.hasAudio,\n          hasVideo: participant.hasVideo,\n          connectionQuality: participant.connectionQuality || 'unknown'\n        },\n        connection: connectionInfo ? {\n          rtt: connectionInfo.rtt,\n          packetsLost: connectionInfo.packetsLost,\n          packetsReceived: connectionInfo.packetsReceived,\n          bytesReceived: connectionInfo.bytesReceived,\n          bytesSent: connectionInfo.bytesSent,\n          quality: connectionInfo.quality,\n          lastUpdated: connectionInfo.timestamp\n        } : null,\n        timestamp: new Date().toISOString()\n      };\n\n      return new Response(\n        JSON.stringify(response),\n        { \n          status: 200,\n          headers: { \n            \"Content-Type\": \"application/json\",\n            \"Cache-Control\": \"no-cache, no-store, must-revalidate\"\n          }\n        }\n      );\n\n    } catch (error) {\n      console.error(\"Error getting participant status:\", error);\n      return new Response(\n        JSON.stringify({ \n          error: \"Internal server error\",\n          message: error instanceof Error ? error.message : \"Unknown error\"\n        }),\n        { \n          status: 500,\n          headers: { \"Content-Type\": \"application/json\" }\n        }\n      );\n    }\n  },\n\n  async PUT(req, ctx) {\n    try {\n      // Authenticate request\n      const authResult = await authenticateRequest(req);\n      if (!authResult.success) {\n        return new Response(\n          JSON.stringify({ error: \"Authentication required\" }),\n          { \n            status: 401,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      const roomId = ctx.params.roomId;\n      const participantId = ctx.params.participantId;\n      \n      if (!roomId || !participantId) {\n        return new Response(\n          JSON.stringify({ error: \"Room ID and Participant ID are required\" }),\n          { \n            status: 400,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      // Parse request body\n      const body = await req.json();\n      const { action, data } = body;\n\n      if (!action) {\n        return new Response(\n          JSON.stringify({ error: \"Action is required\" }),\n          { \n            status: 400,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      // Get WebRTC service manager\n      const serviceManager = getWebRTCServiceManager();\n      const roomCoordinator = serviceManager.getRoomCoordinator();\n\n      let result;\n      switch (action) {\n        case 'kick':\n          // Only host or admin can kick participants\n          if (authResult.user.role !== 'admin') {\n            const roomSession = await roomCoordinator.getRoomSession(roomId);\n            if (!roomSession || roomSession.hostId !== authResult.user.id) {\n              return new Response(\n                JSON.stringify({ error: \"Only the host or admin can kick participants\" }),\n                { \n                  status: 403,\n                  headers: { \"Content-Type\": \"application/json\" }\n                }\n              );\n            }\n          }\n          \n          result = await roomCoordinator.kickParticipant(roomId, participantId, data?.reason || 'Kicked by host');\n          break;\n\n        case 'update-media':\n          // Only the participant themselves can update their media status\n          if (participantId !== authResult.user.id && authResult.user.role !== 'admin') {\n            return new Response(\n              JSON.stringify({ error: \"Can only update your own media status\" }),\n              { \n                status: 403,\n                headers: { \"Content-Type\": \"application/json\" }\n              }\n            );\n          }\n          \n          result = await roomCoordinator.updateParticipantMedia(roomId, participantId, {\n            hasAudio: data?.hasAudio,\n            hasVideo: data?.hasVideo\n          });\n          break;\n\n        case 'update-connection':\n          // Update connection quality metrics\n          result = await roomCoordinator.updateParticipantConnection(roomId, participantId, data);\n          break;\n\n        default:\n          return new Response(\n            JSON.stringify({ error: `Unknown action: ${action}` }),\n            { \n              status: 400,\n              headers: { \"Content-Type\": \"application/json\" }\n            }\n          );\n      }\n\n      return new Response(\n        JSON.stringify({ \n          success: true,\n          action,\n          result,\n          timestamp: new Date().toISOString()\n        }),\n        { \n          status: 200,\n          headers: { \"Content-Type\": \"application/json\" }\n        }\n      );\n\n    } catch (error) {\n      console.error(\"Error updating participant status:\", error);\n      return new Response(\n        JSON.stringify({ \n          error: \"Internal server error\",\n          message: error instanceof Error ? error.message : \"Unknown error\"\n        }),\n        { \n          status: 500,\n          headers: { \"Content-Type\": \"application/json\" }\n        }\n      );\n    }\n  }\n};"