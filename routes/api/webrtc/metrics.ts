/**\n * WebRTC Metrics API\n * \n * GET /api/webrtc/metrics - Get WebRTC connection and performance metrics\n */\n\nimport { Handlers } from \"$fresh/server.ts\";\nimport { getWebRTCServiceManager } from \"../../../lib/webrtc/index.ts\";\nimport { authenticateRequest } from \"../../../lib/middleware/auth.ts\";\n\nexport const handler: Handlers = {\n  async GET(req, ctx) {\n    try {\n      // Authenticate request (admin only for detailed metrics)\n      const authResult = await authenticateRequest(req);\n      if (!authResult.success) {\n        return new Response(\n          JSON.stringify({ error: \"Authentication required\" }),\n          { \n            status: 401,\n            headers: { \"Content-Type\": \"application/json\" }\n          }\n        );\n      }\n\n      // Parse query parameters\n      const url = new URL(req.url);\n      const roomId = url.searchParams.get('roomId');\n      const participantId = url.searchParams.get('participantId');\n      const timeRange = url.searchParams.get('timeRange') || '1h'; // 1h, 24h, 7d\n      const includeDetails = url.searchParams.get('details') === 'true';\n\n      // Get WebRTC service manager\n      const serviceManager = getWebRTCServiceManager();\n      const metricsCollector = serviceManager.getMetricsCollector();\n\n      let response: any = {\n        timestamp: new Date().toISOString()\n      };\n\n      if (roomId && participantId) {\n        // Get specific participant metrics\n        const connectionMetrics = metricsCollector.getConnectionMetrics(participantId)\n          .filter(m => m.roomId === roomId);\n        \n        response = {\n          roomId,\n          participantId,\n          connectionMetrics: includeDetails ? connectionMetrics : connectionMetrics.slice(-10),\n          summary: {\n            totalDataPoints: connectionMetrics.length,\n            averageRTT: connectionMetrics.length > 0 \n              ? connectionMetrics.reduce((sum, m) => sum + m.rtt, 0) / connectionMetrics.length\n              : 0,\n            totalPacketsLost: connectionMetrics.reduce((sum, m) => sum + m.packetsLost, 0),\n            totalPacketsReceived: connectionMetrics.reduce((sum, m) => sum + m.packetsReceived, 0),\n            packetLossRate: connectionMetrics.length > 0 \n              ? connectionMetrics.reduce((sum, m) => sum + (m.packetsLost / (m.packetsReceived + m.packetsLost || 1)), 0) / connectionMetrics.length\n              : 0\n          },\n          timestamp: new Date().toISOString()\n        };\n      } else if (roomId) {\n        // Get room-specific metrics\n        const roomMetrics = metricsCollector.getRoomMetrics(roomId);\n        \n        response = {\n          roomId,\n          ...roomMetrics,\n          timestamp: new Date().toISOString()\n        };\n      } else {\n        // Get aggregated metrics (admin only)\n        if (authResult.user.role !== 'admin') {\n          return new Response(\n            JSON.stringify({ error: \"Admin access required for global metrics\" }),\n            { \n              status: 403,\n              headers: { \"Content-Type\": \"application/json\" }\n            }\n          );\n        }\n        \n        const aggregatedMetrics = metricsCollector.getAggregatedMetrics();\n        \n        response = {\n          global: true,\n          metrics: aggregatedMetrics,\n          timestamp: new Date().toISOString()\n        };\n      }\n\n      return new Response(\n        JSON.stringify(response),\n        { \n          status: 200,\n          headers: { \n            \"Content-Type\": \"application/json\",\n            \"Cache-Control\": \"no-cache, no-store, must-revalidate\"\n          }\n        }\n      );\n\n    } catch (error) {\n      console.error(\"Error getting WebRTC metrics:\", error);\n      return new Response(\n        JSON.stringify({ \n          error: \"Internal server error\",\n          message: error instanceof Error ? error.message : \"Unknown error\"\n        }),\n        { \n          status: 500,\n          headers: { \"Content-Type\": \"application/json\" }\n        }\n      );\n    }\n  }\n};"